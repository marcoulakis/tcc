{
    "id": "b435a740-415e-4805-8689-0986ee7a134d",
    "owner_id": "a634b01a-53ec-4b3d-9c7c-da7e84b36e79",
    "parent_id": null,
    "slug": "documentacao-da-api-do-tabnews",
    "title": "Documentação da API do TabNews",
    "body": "## Visão Geral:\n- [Introdução](#introducao)\n- [Change log](#changelog)\n- [Exemplos](#exemplos)\n- [Obter lista de posts da página inicial](#homeContents)\n- [Obter lista de posts de um determinado usuário](#userContents)\n- [Obter informações de um post](#rootData)\n- [Obter conteúdos children (comentários) de um post](#childrenData)\n- [Obter lista com informações de quantos usuários, posts e/ou comentários foram criados em determinado dia (status)](#statusData)\n- [Logar usuário](#logar)\n- [Criar usuário](#criarUsuario)\n- [Publicar conteúdo](#postContent)\n<br>\n\n<h2 id=\"introducao\">Introdução</h2>\nA API do TabNews é uma API que retorna diversas informações em relação aos conteúdos criados lá, além de ser possível logar, cadastrar e criar conteúdos.<br>\n\nA comunicação é feita através de HTTPS usando GET ou POST. Tanto a solicitação quanto a resposta são formatadas como JSON e o tipo de conteúdo de ambas é application/json.\n\n<h2 id=\"changelog\">Change log</h2>\n-\n\n<h2 id=\"exemplos\">Exemplos</h2>\nOs exemplos a seguir mostram casos de usos comuns.\n<br>\n<br>\n\n<h2 id=\"homeContents\">Obter lista de posts da página inicial</h2>\n\n```\nhttps://tabnews.com.br/api/v1/contents?page={pagina}&per_page={porPagina}&strategy={estrategia} \n```\n| Parâmetros: |  |\n|--------------|----------------------------|\n| {pagina}    | Página que você deseja acessar|\n| {porPagina} | Quantos conteúdos devem ser retornados por página|\n| {estrategia} | Classificação dos conteúdos (new, old ou best)|\n<br>\n<br>\n\n<h2 id=\"userContents\">Obter lista de posts de um determinado usuário</h2>\n\n```\nhttps://tabnews.com.br/api/v1/contents/{user}?page={pagina}&per_page={porPagina}&strategy={estrategia} \n```\n| Parâmetros: |  |\n|--------------|----------------------------|\n| {user} | Nome do usuário que você quer obter os conteúdos | \n| {pagina}    | Página que você deseja acessar|\n| {porPagina} | Quantos conteúdos devem ser retornados por página|\n| {estrategia} | Classificação dos conteúdos (new, old ou best)|\n<br>\n<br>\n\n<h2 id=\"rootData\">Obter conteúdo de uma publicação</h2>\n\n```\nhttps://tabnews.com.br/api/v1/contents/{user}/{slug}\n```\n| Parâmetros: |  |\n|--------------|----------------------------|\n| {user} | Usuário que você deseja obter o post |\n| {slug} | Slug do post que você deseja obter |\n<br>\n<br>\n\n<h2 id=\"childrenData\">Obter comentários de uma publicação</h2>\n\n```\nhttps://tabnews.com.br/api/v1/contents/{user}/{slug}/children\n```\n| Parâmetros: |  |\n|--------------|----------------------------|\n| {user} | Usuário que você deseja obter os comentários do post |\n| {slug} | Slug do post que você deseja obter os comentários |\n<br>\n<br>\n\n<h2 id=\"statusData\">Obter lista com informações de quantos usuários, posts e/ou comentários foram criados em determinado dia (status)</h2>\n\nPara obter quantos usuários foram criados (por dia):\n```\nhttps://tabnews.com.br/api/v1/analytics/users-created\n```\n\nPara obter quantas publicações foram feitas (por dia):\n```\nhttps://tabnews.com.br/api/v1/analytics/root-content-published\n```\n\nPara obter quantos usuários foram criados (por dia):\n```\nhttps://tabnews.com.br/api/v1/analytics/child-content-published\n```\n<br>\n<br>\n\n<h2 id=\"logar\">Logar usuário</h2>\n\n```javascript\nconst data = {email: \"{insira o email aqui}\", password: \"{insira a senha aqui}\"}\n\nfetch('https://tabnews.com.br/api/v1/sessions', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      })\n      .then((response) => response.json())\n      .then((data) => {\n         console.log(\"Data: \", data)\n  })\n      .catch((error) => {\n         console.log(\"Error: \", error)\n  });\n\n```\nCaso ocorra tudo certo ele deve retornar algo parecido com:\n```\nData:\n{\n  \"id\": \"6fbeca8f-13f1-43e3-b3**-************\",\n  \"token\": \"e5fba39f8c4ec21cfd50d94ec8f659ed3258e301afe51240786d9ecddc8d35aeecae391ffe73e38d8c**************\",\n  \"expires_at\": \"yyyy-mm-ddT14:34:08.664Z\",\n  \"created_at\": \"yyyy-mm-ddT14:34:08.664Z\",\n  \"updated_at\": \"yyyy-mm-ddT14:34:08.664Z\"\n}\n```\n\nCaso ocorra algum erro ele deve retornar algo como:\n```Error:\n{}\nData:\n{\n  \"name\": \"UnauthorizedError\",\n  \"message\": \"Dados não conferem.\",\n  \"action\": \"Verifique se os dados enviados estão corretos.\",\n  \"status_code\": 401,\n  \"error_id\": \"4a61276a-8dfc-41cc-a563-7fa4975*****\",\n  \"request_id\": \"fe12a267-aa3c-4fad-8375-2fe92d6*****\",\n  \"error_location_code\": \"CONTROLLER:SESSIONS:POST_HANDLER:DATA_MISMATCH\"\n}\n```\n<br>\n<br>\n\n<h2 id=\"criarUsuario\">Criar usuário</h2>\n\n```javascript\nconst data = {username: \"{insira o username aqui}\", email: \"{insira o email aqui}\", password: \"{insira a senha aqui}\"}\n\nfetch('https://tabnews.com.br/api/v1/users', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      })\n      .then((response) => response.json())\n      .then((data) => {\n         console.log(\"Data: \", data)\n  })\n      .catch((error) => {\n         console.log(\"Error: \", error)\n  });\n  ```\n⚠O usuário terá que confirmar o email para acessar a conta⚠\n<br>\n<br>\n\n<!-- \n\n```javascript\nconst data = {\n    body: \"insira o body do seu post aqui\",\n    source_url: \"insira a fonte do seu post aqui, caso não tenha, deixe em branco\",\n    title: \"insira o título do seu post aqui\",\n    'status': 'published', \n}\n\ncookies = {\n    session_id: \"insira seu session_id aqui\"\n}\n\nfetch('https://tabnews.com.br/api/v1/users/contents', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data, cookies),\n      })\n      .then((response) => response.json())\n      .then((data) => {\n         console.log(\"Data: \", data)\n  })\n      .catch((error) => {\n         console.log(\"Error: \", error)\n  });\n  ```\n  \n -->\n \n \n \nBom, em breve devem ser adicionadas aqui as funções de alterar senha, alterar username, fazer comentários, editar posts, além da função de publicar conteúdos (que eu testei de várias formas e deu diversos erros, de permissão, de PATCH ou de sintaxe mesmo).\n\nUma pergunta ao @filipedeschamps, onde essa documentação deve ser adicionada? No GitHub? \n\nQuaisquer sugestões ou alterações vocês podem comentar e serão muito bem vindas.",
    "status": "published",
    "source_url": null,
    "created_at": "2022-07-23T16:12:27.009Z",
    "updated_at": "2022-07-23T17:26:42.537Z",
    "published_at": "2022-07-23T16:12:27.057Z",
    "deleted_at": null,
    "username": "GabrielSozinho",
    "parent_title": null,
    "parent_slug": null,
    "parent_username": null,
    "tabcoins": 6,
    "children_deep_count": 3
  }